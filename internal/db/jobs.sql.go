// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: jobs.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (stream_id, sorted, name, type, description, llm_model, system_prompt, max_tokens, top_p, temperature, template, method, endpoint, params, output, output_parses, search_engine, search_options, query_field, output_field)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, stream_id, sorted, name, type, description, llm_model, temperature, top_p, max_tokens, template, system_prompt, method, endpoint, params, output, output_parses, created_at, search_engine, search_options, query_field, output_field
`

type CreateJobParams struct {
	StreamID      int64           `json:"stream_id"`
	Sorted        int64           `json:"sorted"`
	Name          string          `json:"name"`
	Type          string          `json:"type"`
	Description   sql.NullString  `json:"description"`
	LlmModel      sql.NullString  `json:"llm_model"`
	SystemPrompt  sql.NullString  `json:"system_prompt"`
	MaxTokens     sql.NullInt64   `json:"max_tokens"`
	TopP          sql.NullFloat64 `json:"top_p"`
	Temperature   sql.NullFloat64 `json:"temperature"`
	Template      sql.NullString  `json:"template"`
	Method        sql.NullString  `json:"method"`
	Endpoint      sql.NullString  `json:"endpoint"`
	Params        sql.NullString  `json:"params"`
	Output        sql.NullString  `json:"output"`
	OutputParses  sql.NullString  `json:"output_parses"`
	SearchEngine  sql.NullString  `json:"search_engine"`
	SearchOptions sql.NullString  `json:"search_options"`
	QueryField    sql.NullString  `json:"query_field"`
	OutputField   sql.NullString  `json:"output_field"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (*Job, error) {
	row := q.queryRow(ctx, q.createJobStmt, createJob,
		arg.StreamID,
		arg.Sorted,
		arg.Name,
		arg.Type,
		arg.Description,
		arg.LlmModel,
		arg.SystemPrompt,
		arg.MaxTokens,
		arg.TopP,
		arg.Temperature,
		arg.Template,
		arg.Method,
		arg.Endpoint,
		arg.Params,
		arg.Output,
		arg.OutputParses,
		arg.SearchEngine,
		arg.SearchOptions,
		arg.QueryField,
		arg.OutputField,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Sorted,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.LlmModel,
		&i.Temperature,
		&i.TopP,
		&i.MaxTokens,
		&i.Template,
		&i.SystemPrompt,
		&i.Method,
		&i.Endpoint,
		&i.Params,
		&i.Output,
		&i.OutputParses,
		&i.CreatedAt,
		&i.SearchEngine,
		&i.SearchOptions,
		&i.QueryField,
		&i.OutputField,
	)
	return &i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs WHERE id = ?
`

func (q *Queries) DeleteJob(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteJobStmt, deleteJob, id)
	return err
}

const deleteJobs = `-- name: DeleteJobs :exec
DELETE FROM jobs WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteJobs(ctx context.Context, ids []int64) error {
	query := deleteJobs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const deleteJobsByStreamID = `-- name: DeleteJobsByStreamID :exec
DELETE FROM jobs WHERE stream_id = ?
`

func (q *Queries) DeleteJobsByStreamID(ctx context.Context, streamID int64) error {
	_, err := q.exec(ctx, q.deleteJobsByStreamIDStmt, deleteJobsByStreamID, streamID)
	return err
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, stream_id, sorted, name, type, description, llm_model, temperature, top_p, max_tokens, template, system_prompt, method, endpoint, params, output, output_parses, created_at, search_engine, search_options, query_field, output_field FROM jobs WHERE id = ?
`

func (q *Queries) GetJobByID(ctx context.Context, id int64) (*Job, error) {
	row := q.queryRow(ctx, q.getJobByIDStmt, getJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Sorted,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.LlmModel,
		&i.Temperature,
		&i.TopP,
		&i.MaxTokens,
		&i.Template,
		&i.SystemPrompt,
		&i.Method,
		&i.Endpoint,
		&i.Params,
		&i.Output,
		&i.OutputParses,
		&i.CreatedAt,
		&i.SearchEngine,
		&i.SearchOptions,
		&i.QueryField,
		&i.OutputField,
	)
	return &i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, stream_id, sorted, name, type, description, llm_model, temperature, top_p, max_tokens, template, system_prompt, method, endpoint, params, output, output_parses, created_at, search_engine, search_options, query_field, output_field FROM jobs
`

func (q *Queries) ListJobs(ctx context.Context) ([]*Job, error) {
	rows, err := q.query(ctx, q.listJobsStmt, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.StreamID,
			&i.Sorted,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.LlmModel,
			&i.Temperature,
			&i.TopP,
			&i.MaxTokens,
			&i.Template,
			&i.SystemPrompt,
			&i.Method,
			&i.Endpoint,
			&i.Params,
			&i.Output,
			&i.OutputParses,
			&i.CreatedAt,
			&i.SearchEngine,
			&i.SearchOptions,
			&i.QueryField,
			&i.OutputField,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByStreamID = `-- name: ListJobsByStreamID :many
SELECT id, stream_id, sorted, name, type, description, llm_model, temperature, top_p, max_tokens, template, system_prompt, method, endpoint, params, output, output_parses, created_at, search_engine, search_options, query_field, output_field FROM jobs WHERE stream_id = ? ORDER BY sorted
`

func (q *Queries) ListJobsByStreamID(ctx context.Context, streamID int64) ([]*Job, error) {
	rows, err := q.query(ctx, q.listJobsByStreamIDStmt, listJobsByStreamID, streamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.StreamID,
			&i.Sorted,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.LlmModel,
			&i.Temperature,
			&i.TopP,
			&i.MaxTokens,
			&i.Template,
			&i.SystemPrompt,
			&i.Method,
			&i.Endpoint,
			&i.Params,
			&i.Output,
			&i.OutputParses,
			&i.CreatedAt,
			&i.SearchEngine,
			&i.SearchOptions,
			&i.QueryField,
			&i.OutputField,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs
SET name = ?, type = ?, sorted = ?, description = ?, llm_model = ?, system_prompt = ?, max_tokens = ?, top_p = ?, temperature = ?, template = ?, method = ?, endpoint = ?, params = ?, output = ?, output_parses = ?, search_engine = ?, search_options = ?, query_field = ?, output_field = ?
WHERE id = ?
RETURNING id, stream_id, sorted, name, type, description, llm_model, temperature, top_p, max_tokens, template, system_prompt, method, endpoint, params, output, output_parses, created_at, search_engine, search_options, query_field, output_field
`

type UpdateJobParams struct {
	Name          string          `json:"name"`
	Type          string          `json:"type"`
	Sorted        int64           `json:"sorted"`
	Description   sql.NullString  `json:"description"`
	LlmModel      sql.NullString  `json:"llm_model"`
	SystemPrompt  sql.NullString  `json:"system_prompt"`
	MaxTokens     sql.NullInt64   `json:"max_tokens"`
	TopP          sql.NullFloat64 `json:"top_p"`
	Temperature   sql.NullFloat64 `json:"temperature"`
	Template      sql.NullString  `json:"template"`
	Method        sql.NullString  `json:"method"`
	Endpoint      sql.NullString  `json:"endpoint"`
	Params        sql.NullString  `json:"params"`
	Output        sql.NullString  `json:"output"`
	OutputParses  sql.NullString  `json:"output_parses"`
	SearchEngine  sql.NullString  `json:"search_engine"`
	SearchOptions sql.NullString  `json:"search_options"`
	QueryField    sql.NullString  `json:"query_field"`
	OutputField   sql.NullString  `json:"output_field"`
	ID            int64           `json:"id"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (*Job, error) {
	row := q.queryRow(ctx, q.updateJobStmt, updateJob,
		arg.Name,
		arg.Type,
		arg.Sorted,
		arg.Description,
		arg.LlmModel,
		arg.SystemPrompt,
		arg.MaxTokens,
		arg.TopP,
		arg.Temperature,
		arg.Template,
		arg.Method,
		arg.Endpoint,
		arg.Params,
		arg.Output,
		arg.OutputParses,
		arg.SearchEngine,
		arg.SearchOptions,
		arg.QueryField,
		arg.OutputField,
		arg.ID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Sorted,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.LlmModel,
		&i.Temperature,
		&i.TopP,
		&i.MaxTokens,
		&i.Template,
		&i.SystemPrompt,
		&i.Method,
		&i.Endpoint,
		&i.Params,
		&i.Output,
		&i.OutputParses,
		&i.CreatedAt,
		&i.SearchEngine,
		&i.SearchOptions,
		&i.QueryField,
		&i.OutputField,
	)
	return &i, err
}
