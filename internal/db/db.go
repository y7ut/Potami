// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createStreamStmt, err = db.PrepareContext(ctx, createStream); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStream: %w", err)
	}
	if q.deleteJobStmt, err = db.PrepareContext(ctx, deleteJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJob: %w", err)
	}
	if q.deleteJobsStmt, err = db.PrepareContext(ctx, deleteJobs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobs: %w", err)
	}
	if q.deleteJobsByStreamIDStmt, err = db.PrepareContext(ctx, deleteJobsByStreamID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobsByStreamID: %w", err)
	}
	if q.deleteStreamStmt, err = db.PrepareContext(ctx, deleteStream); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStream: %w", err)
	}
	if q.getJobByIDStmt, err = db.PrepareContext(ctx, getJobByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobByID: %w", err)
	}
	if q.getStreamByNameStmt, err = db.PrepareContext(ctx, getStreamByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetStreamByName: %w", err)
	}
	if q.listJobsStmt, err = db.PrepareContext(ctx, listJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobs: %w", err)
	}
	if q.listJobsByStreamIDStmt, err = db.PrepareContext(ctx, listJobsByStreamID); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobsByStreamID: %w", err)
	}
	if q.listStreamsStmt, err = db.PrepareContext(ctx, listStreams); err != nil {
		return nil, fmt.Errorf("error preparing query ListStreams: %w", err)
	}
	if q.updateJobStmt, err = db.PrepareContext(ctx, updateJob); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJob: %w", err)
	}
	if q.updateStreamStmt, err = db.PrepareContext(ctx, updateStream); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStream: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createStreamStmt != nil {
		if cerr := q.createStreamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStreamStmt: %w", cerr)
		}
	}
	if q.deleteJobStmt != nil {
		if cerr := q.deleteJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobStmt: %w", cerr)
		}
	}
	if q.deleteJobsStmt != nil {
		if cerr := q.deleteJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobsStmt: %w", cerr)
		}
	}
	if q.deleteJobsByStreamIDStmt != nil {
		if cerr := q.deleteJobsByStreamIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobsByStreamIDStmt: %w", cerr)
		}
	}
	if q.deleteStreamStmt != nil {
		if cerr := q.deleteStreamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStreamStmt: %w", cerr)
		}
	}
	if q.getJobByIDStmt != nil {
		if cerr := q.getJobByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobByIDStmt: %w", cerr)
		}
	}
	if q.getStreamByNameStmt != nil {
		if cerr := q.getStreamByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStreamByNameStmt: %w", cerr)
		}
	}
	if q.listJobsStmt != nil {
		if cerr := q.listJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsStmt: %w", cerr)
		}
	}
	if q.listJobsByStreamIDStmt != nil {
		if cerr := q.listJobsByStreamIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsByStreamIDStmt: %w", cerr)
		}
	}
	if q.listStreamsStmt != nil {
		if cerr := q.listStreamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStreamsStmt: %w", cerr)
		}
	}
	if q.updateJobStmt != nil {
		if cerr := q.updateJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobStmt: %w", cerr)
		}
	}
	if q.updateStreamStmt != nil {
		if cerr := q.updateStreamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStreamStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createJobStmt            *sql.Stmt
	createStreamStmt         *sql.Stmt
	deleteJobStmt            *sql.Stmt
	deleteJobsStmt           *sql.Stmt
	deleteJobsByStreamIDStmt *sql.Stmt
	deleteStreamStmt         *sql.Stmt
	getJobByIDStmt           *sql.Stmt
	getStreamByNameStmt      *sql.Stmt
	listJobsStmt             *sql.Stmt
	listJobsByStreamIDStmt   *sql.Stmt
	listStreamsStmt          *sql.Stmt
	updateJobStmt            *sql.Stmt
	updateStreamStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createJobStmt:            q.createJobStmt,
		createStreamStmt:         q.createStreamStmt,
		deleteJobStmt:            q.deleteJobStmt,
		deleteJobsStmt:           q.deleteJobsStmt,
		deleteJobsByStreamIDStmt: q.deleteJobsByStreamIDStmt,
		deleteStreamStmt:         q.deleteStreamStmt,
		getJobByIDStmt:           q.getJobByIDStmt,
		getStreamByNameStmt:      q.getStreamByNameStmt,
		listJobsStmt:             q.listJobsStmt,
		listJobsByStreamIDStmt:   q.listJobsByStreamIDStmt,
		listStreamsStmt:          q.listStreamsStmt,
		updateJobStmt:            q.updateJobStmt,
		updateStreamStmt:         q.updateStreamStmt,
	}
}
